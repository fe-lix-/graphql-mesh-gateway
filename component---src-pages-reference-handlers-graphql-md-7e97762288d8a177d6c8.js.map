{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/reference/handlers/graphql.md"],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"mappings":"2OAWsBA,E,mFAFTC,EAAe,GAOtBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAI5E,eACE,GAAM,oBADR,qBAGA,wHAAyG,uBAAYC,WAAW,KAAvB,iBAAzG,gEACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,wMAeL,uEAAwD,cAAGA,WAAW,IAClE,KAAQ,0DAD4C,iCAAxD,2BAGA,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,+GACF,cAAGC,WAAW,IACR,KAAQ,6EADd,8CAGE,eACE,GAAM,yBADR,0BAGA,SAAC,UAAD,CAASD,QAAQ,aAKjB,eACE,GAAM,gBADR,iBAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,iBADZ,oUAuCL,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YAApB,YAAqF,uBAAYA,WAAW,MAAvB,UAArF,mNAGA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,iBAApB,YAA0F,uBAAYA,WAAW,MAAvB,OAA1F,kHACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,oBAApB,YAA6F,uBAAYA,WAAW,MAAvB,QAA7F,sHACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,oBAApB,YAA6F,uBAAYA,WAAW,MAAvB,WAA7F,0CACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,YAAmF,uBAAYA,WAAW,MAAvB,uBAAnF,iDAsBNH,EAAWM,gBAAiB","file":"component---src-pages-reference-handlers-graphql-md-7e97762288d8a177d6c8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Headers from '/src/pages/_includes/headers.md';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"graphql-handlers\"\n    }}>{`GraphQL handlers`}</h1>\n    <p>{`This handler allows you to load remote GraphQL schemas and use it with schema-stitching, based on `}<inlineCode parentName=\"p\">{`graphql-tools`}</inlineCode>{`. To get started, use the handler in your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"MyGraphQLApi\",\n      \"handler\": {\n        \"graphql\": {\n          \"endpoint\": \"http://my-service-url:3000/graphql\"\n        }\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`GraphQL handlers can also use local sources, see `}<a parentName=\"p\" {...{\n        \"href\": \"../handlers/index.md#reference-local-files-in-handlers\"\n      }}>{`Reference local file handlers`}</a>{` for more information.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You can check out our example that uses schema stitching with a PostgreSQL data source.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Urigo/graphql-mesh/tree/master/examples/postgres-geodb\"\n      }}>{`Click here to open the example on GitHub`}</a></p>\n    <h2 {...{\n      \"id\": \"dynamic-header-values\"\n    }}>{`Dynamic Header Values`}</h2>\n    <Headers mdxType=\"Headers\" />\n    {\n      /* Mesh can take dynamic values from the GraphQL Context or the environmental variables.\n      The expression inside dynamic values should be as in JS. */\n    }\n    <h3 {...{\n      \"id\": \"from-context\"\n    }}>{`From Context`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"MyGraphQLApi\",\n      \"handler\": {\n        \"graphql\": {\n          \"endpoint\": \"http://my-service-url:3000/graphql\",\n          \"operationHeaders\": {\n            \"Authorization\": \"Bearer {context.headers['x-my-api-token']}\"\n          }\n        }\n      }\n    }\n  ]\n}\n`}</code></pre>\n    {\n      /*\n      ### From Environment Variable\n      ```json\n      {\n       \"sources\": [\n         {\n           \"name\": \"MyGraphQLApi\",\n           \"handler\": {\n             \"graphql\": {\n               \"endpoint\": \"http://my-service-url:3000/graphql\",\n               \"operationHeaders\": {\n                 \"Authorization\": \"Bearer {env.MY_API_TOKEN}\"\n               }\n             }\n           }\n         }\n       ]\n      }\n      ``` */\n    }\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`endpoint`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required) - A url or file path to your remote GraphQL endpoint.\nIf you provide a path to a code file(js or ts),\nother options will be ignored and the schema exported from the file will be used directly.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`schemaHeaders`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`) - JSON object representing the Headers to add to the runtime of the API calls only for schema introspection`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`operationHeaders`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`JSON`}</inlineCode>{`) - JSON object representing the Headers to add to the runtime of the API calls only for operation during runtime`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useGETForQueries`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`) - Use HTTP GET for Query operations`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`method`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String (GET | POST)`}</inlineCode>{`) - HTTP method used for GraphQL operations`}\n        {\n          /* \n          `customFetch` (type: `Any`) - Path to a custom W3 Compatible Fetch Implementation\n          `webSocketImpl` (type: `String`) - Path to a custom W3 Compatible WebSocket Implementation\n          `introspection` (type: `String`) - Path to the introspection\n          You can separately give schema introspection\n          `multipart` (type: `Boolean`) - Enable multipart/form data in order to support file uploads\n          `subscriptionsProtocol` (type: `String (SSE | WS | LEGACY_WS)`) - SSE - Server Sent Events\n          WS - New graphql-ws\n          LEGACY_WS - Legacy subscriptions-transport-ws\n          `retry` (type: `Int`) - Retry attempts if fails\n          `timeout` (type: `Int`) - Timeout in milliseconds\n          `batch` (type: `Boolean`) - Enable/Disable automatic query batching \n          */\n        }\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}