(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[177],{66098:function(e,n,t){"use strict";t.r(n),t.d(n,{_frontmatter:function(){return l},default:function(){return x}});var a,r=t(22122),i=t(19756),o=(t(15007),t(64983)),m=t(99536),d=["components"],l={},p=(a="InlineAlert",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),s={_frontmatter:l},u=m.Z;function x(e){var n=e.components,t=(0,i.Z)(e,d);return(0,o.mdx)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"prefix-transform"},"prefix transform"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"prefix")," transform allow you prefix GraphQL types and GraphQL root operations (under ",(0,o.mdx)("inlineCode",{parentName:"p"},"Query/Mutation"),")."),(0,o.mdx)("p",null,'You can use it to easily "namespace" APIs in your unified API and avoid conflicts.'),(0,o.mdx)("h2",{id:"how-to-use"},"How to use?"),(0,o.mdx)("p",null,"Add the following configuration to your Mesh config file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "transforms": [\n    {\n      "prefix": {\n        "mode": "bare | wrap",\n        "value": "MyApi_"\n      }\n    }\n  ]\n}\n')),(0,o.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,'For information about "bare" and "wrap" modes, read the ',(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes"},"dedicated section"),"."),(0,o.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"You can check out our example that uses schema stitching with a PostgreSQL datasource and prefix transform.\n",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/Urigo/graphql-mesh/tree/master/examples/postgres-geodb"},"Click here to open the example on GitHub")),(0,o.mdx)("h2",{id:"config-api-reference"},"Config API Reference"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"mode")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"String")," (",(0,o.mdx)("inlineCode",{parentName:"li"},"bare")," | ",(0,o.mdx)("inlineCode",{parentName:"li"},"wrap"),")) - Specify to apply prefix transform to bare schema or by wrapping original schema"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"value")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"String"),") - The prefix to apply to the schema types. By default it's the API name."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"ignore")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"Array of String"),", required) - List of ignored types"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"includeRootOperations")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"Boolean"),") - Changes root types and changes the field names (default: false)"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"includeTypes")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"Boolean"),") - Changes types (default: true)")))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-reference-transforms-prefix-md-1eb351022c2283793343.js.map