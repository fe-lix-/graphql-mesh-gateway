(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[41],{63624:function(e,n,a){"use strict";a.r(n),a.d(n,{_frontmatter:function(){return r},default:function(){return u}});var t=a(22122),i=a(19756),o=(a(15007),a(64983)),m=a(99536),l=["components"],r={},p={_frontmatter:r},d=m.Z;function u(e){var n=e.components,a=(0,i.Z)(e,l);return(0,o.mdx)(d,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"encapsulate-transform"},"encapsulate transform"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"encapsulate")," transform allow you to easily encapsulate a specific schema into a single field under the root type."),(0,o.mdx)("p",null,"For instance, if your handler created a schema like this, named ",(0,o.mdx)("inlineCode",{parentName:"p"},"mySchema"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  something: String\n}\n\ntype Mutation {\n  doSomething: String\n}\n")),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"encapsulate")," transform will change your schema to this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  mySchema: mySchemaQuery!\n}\n\ntype Mutation {\n  mySchema: mySchemaMutation!\n}\n\ntype mySchemaQuery {\n  something: String\n}\n\ntype mySchemaMutation {\n  doSomething: String\n}\n")),(0,o.mdx)("p",null,"This transformer is useful when you have multiple APIs in your Mesh, and you wish to have it wrapped with a name to have a better understanding on where each field is coming from."),(0,o.mdx)("h2",{id:"how-to-use"},"How to use?"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "transforms": [\n    {\n      "encapsulate": {\n        "applyTo": {\n          "query": true,\n          "mutation": false,\n          "subscription": false\n        }\n      }\n    }\n  ]\n}\n\n')),(0,o.mdx)("h2",{id:"config-api-reference"},"Config API Reference"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"name")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"String"),") - Optional, name to use for grouping under the root types. If not specific, the API name is used."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"applyTo")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"Object"),") - Allow you to choose which root operations you would like to apply. By default, it's applied to all root types.:",(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"query")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"Boolean"),")"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"mutation")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"Boolean"),")"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"subscription")," (type: ",(0,o.mdx)("inlineCode",{parentName:"li"},"Boolean"),")")))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-reference-transforms-encapsulate-md-0a671e77909ba273e82b.js.map