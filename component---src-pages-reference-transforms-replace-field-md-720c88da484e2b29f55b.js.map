{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/reference/transforms/replace-field.md"],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"mappings":"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","file":"component---src-pages-reference-transforms-replace-field-md-720c88da484e2b29f55b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"replacefield-transform\"\n    }}>{`replaceField transform`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`replaceField`}</inlineCode>{` transform allows you to replace configuration properties of a GraphQL field (source) with the ones of another field (target).`}</p>\n    <p>{`This is extremely useful when you want to hoist field values from one subfield to its parent, but it can be customized to completely replace and/or compose resolve functions with a great degree of customization.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about \"bare\" and \"wrap\" modes, read the `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes\"\n      }}>{`dedicated section`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-use\"\n    }}>{`How to use?`}</h2>\n    <p>{`Imagine you have generated your schema from a data source you don't control, and the generated schema looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  books: BooksApiResponse\n}\n\ntype BooksApiResponse {\n  books: [Book]\n}\n\ntype Book {\n  title: String!\n  author: Author!\n  code: String\n}\n\ntype Author {\n  name: String!\n  age: Int!\n}\n`}</code></pre>\n    <p>{`As you can see you would have to request a GraphQL Document like the following, to retrieve the list of books:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  books {\n    books {\n      title\n      author\n    }\n  }\n}\n`}</code></pre>\n    <p>{`This is not ideal because you have to request `}<inlineCode parentName=\"p\">{`books`}</inlineCode>{` as a child of `}<inlineCode parentName=\"p\">{`books`}</inlineCode>{`, so in this case hoisting the value from child to parent would lead to a cleaner schema and request Document.`}</p>\n    <p>{`To achieve this you can add the following configuration to your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"replaceField\": {\n        \"replacements\": [\n          {\n            \"from\": {\n              \"type\": \"Query\",\n              \"field\": \"books\"\n            },\n            \"to\": {\n              \"type\": \"BooksApiResponse\",\n              \"field\": \"books\"\n            },\n            \"scope\": \"hoistValue\"\n          }\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`This will transform your schema from what you had above, to this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  books: [Book]\n}\n\ntype Book {\n  title: String!\n  author: Author!\n  code: String\n}\n\ntype Author {\n  name: String!\n  age: Int!\n}\n`}</code></pre>\n    <p>{`Allowing you to request a GraphQL document like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  books {\n    title\n    author\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"how-the-transform-works\"\n    }}>{`How the transform works`}</h2>\n    <p>{`Let's understand more about how this transform works. With `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{` you define your source, which field in the schema you want to replace.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`[\n  {\n    \"from\": {\n      \"type\": \"Query\",\n      \"field\": \"books\"\n    }\n  }\n]\n`}</code></pre>\n    <p>{`In this case, we want to replace the field `}<inlineCode parentName=\"p\">{`books`}</inlineCode>{` in type `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{`, which by default has the type `}<inlineCode parentName=\"p\">{`BooksApiResponse`}</inlineCode>{`.`}</p>\n    <p>{`With `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{` you define your target, and so which field should replace your identified source field.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"to\": {\n    \"type\": \"BooksApiResponse\",\n    \"field\": \"books\"\n  }\n}\n`}</code></pre>\n    <p>{`To summarize, with the configuration above we want field `}<inlineCode parentName=\"p\">{`books`}</inlineCode>{` in type `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` to be replaced from being of type `}<inlineCode parentName=\"p\">{`BooksApiResponse`}</inlineCode>{` to become type `}<inlineCode parentName=\"p\">{`[Book]`}</inlineCode>{`.`}</p>\n    <p>{`Finally, since we no longer have any reference to `}<inlineCode parentName=\"p\">{`BooksApiResponse`}</inlineCode>{` this becomes a loose type, and so the transform will purge it from the GraphQL schema.`}</p>\n    <h2 {...{\n      \"id\": \"transform-scopes\"\n    }}>{`Transform scopes`}</h2>\n    <p>{`In the paragraph above we've explored how to use the transform to replace field Types.\nThe transform always replaces the type of the source field with the one of the target.`}</p>\n    <p>{`However, the transform also allows you to pass a scope property, which values can be `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`hoistValue`}</inlineCode>{`.`}</p>\n    <p>{`We could say that the scope property could also take a `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` value, but since it's the minimum requirement to replace the Type, this is considered the default scope and so it wouldn't make sense to pass it when you desire just this behavior.`}</p>\n    <h3 {...{\n      \"id\": \"scope-config\"\n    }}>{`scope: config`}</h3>\n    <p>{`When you pass `}<inlineCode parentName=\"p\">{`scope: config`}</inlineCode>{` the transform will replace the full field config.\nA field config includes properties of the field such as description, type, args, resolve, subscribe, deprecationReason, extensions, astNode.`}</p>\n    <p>{`As you can see this is very comprehensive as it includes things like arguments as well as the resolve and subscribe functions.`}</p>\n    <p>{`This can be useful when you have custom resolve functions on your target field and so you are happy to replace the source field entirely.\nHowever, you should be careful in doing this when you fully understand the implications of the behavior for your replaced field.`}</p>\n    <h3 {...{\n      \"id\": \"scope-hoistvalue\"\n    }}>{`scope: hoistValue`}</h3>\n    <p>{`We have seen how `}<inlineCode parentName=\"p\">{`hoistValue`}</inlineCode>{` can be useful in the full example described in the \"How to use?\" paragraph.`}</p>\n    <p>{`Once again, by default, the transform will replace the Type of the field only.\nWhen passing `}<inlineCode parentName=\"p\">{`scope: hoistValue`}</inlineCode>{` in addition to replacing the Type, the transform will wrap the resolve function of the original field (source) with an extra function. This function intercepts the return value of the resolver to ultimately return only the direct child property that has the same name as the target field; hence performing value hoisting.`}</p>\n    <p>{`Taking into account the original schema shared above, originally `}<inlineCode parentName=\"p\">{`Query.books`}</inlineCode>{` would return a value like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  books: {\n    books: [{ title: 'abc', author: 'def' }, { title: 'ghi', author: 'lmn' }]\n  }\n}\n`}</code></pre>\n    <p>{`But the wrapping function applied to the original resolver, when passing `}<inlineCode parentName=\"p\">{`hoistValue`}</inlineCode>{` scope, will change the value above to this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  books: [{ title: 'abc', author: 'def' }, { title: 'ghi', author: 'lmn' }]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"additional-type-definitions\"\n    }}>{`Additional type definitions`}</h2>\n    <p>{`The examples shared so far are simple because we wanted to replace fields with other fields that are available in the original schema.`}</p>\n    <p>{`However, sometimes you might want to replace a field Type with something that is not available in the original schema.\nIn this case, the transform allows you to pass additional type definitions that will be injected into your schema so that you can then use them as target field Types.`}</p>\n    <p>{`Let's have a look at a Mesh config to be applied to the GraphQL schema shared above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"replaceField\": {\n        \"typeDefs\": \"type NewAuthor {\\\\n  age: String\\\\n}\\\\n\",\n        \"replacements\": [\n          {\n            \"from\": {\n              \"type\": \"Author\",\n              \"field\": \"age\"\n            },\n            \"to\": {\n              \"type\": \"NewAuthor\",\n              \"field\": \"age\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`The config above will change type `}<inlineCode parentName=\"p\">{`Author`}</inlineCode>{` from this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Author {\n  name: String!\n  age: Int!\n}\n`}</code></pre>\n    <p>{`To this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Author {\n  name: String!\n  age: String\n}\n`}</code></pre>\n    {\n      /* \n      ## Custom composers\n      Performing value hoisting or replacing the full field config is powerful, but it might not always fully satisfy custom needs.\n      For instance, if you applied transforms to the bare schema (such as field renaming) the built-in value hoisting functionality won't work, because you'd need to hoist the child property provided by the original schema, and not the renamed version.\n      The transform allows you to assign composers to each replace rule, which lets you define your custom logic on top of fields' resolve functions.\n      A composer is a function that wraps the resolve function, giving you access to this before it is executed. You can then intercept its output value so that finally you can also define a custom return value.\n      Let's look at an example.\n      Currently, our `Book` type has a `code` field, we want to replace this field and turn it into a boolean. Our logic assumes that if we have a book code, it means this book is available in our store.\n      Eventually, we want to completely replace `code` with `isAvailable`; as you can see this requires implementing custom logic.\n      ```json\n      {\n       \"transforms\": [\n         {\n           \"replaceField\": {\n             \"typeDefs\": \"type NewBook {\\n  isAvailable: Boolean\\n}\\n\",\n             \"replacements\": [\n               {\n                 \"from\": {\n                   \"type\": \"Book\",\n                   \"field\": \"code\"\n                 },\n                 \"to\": {\n                   \"type\": \"NewBook\",\n                   \"field\": \"isAvailable\"\n                 },\n                 \"composer\": \"./customComposers.js#isAvailable\"\n               }\n             ]\n           }\n         }\n       ]\n      }\n      ```\n      ```js\n      // customResolvers.js\n      module.exports = {\n       isAvailable: next => async (root, args, context, info) => {\n         // 'next' is the field resolve function\n         const code = await next(root, args, context, info);\n         return Boolean(code);\n       },\n      };\n      ```\n      Now our `code` field will return a Boolean as per custom logic implemented through the javascript function above.\n      ## Renaming fields\n      If we continue to elaborate from what we did above, when attaching composers to field resolvers to implement custom logic; it seems logical that a field that has been changed in Type and so return value, even with the addition of custom logic, has certainly evolved from the original field and so it would probably be best to rename it.\n      replaceField transform allows you to do that directly as part of the replacements rules; you just need to pass the `name` property to define a new name for your target field.\n      Let's wrap this up by adding a finishing touch to our schema:\n      ```json\n      {\n       \"transforms\": [\n         {\n           \"replaceField\": {\n             \"typeDefs\": \"type NewBook {\\n  isAvailable: Boolean\\n}\\n\",\n             \"replacements\": [\n               {\n                 \"from\": {\n                   \"type\": \"Query\",\n                   \"field\": \"books\"\n                 },\n                 \"to\": {\n                   \"type\": \"BooksApiResponse\",\n                   \"field\": \"books\"\n                 },\n                 \"scope\": \"hoistValue\"\n               },\n               {\n                 \"from\": {\n                   \"type\": \"Book\",\n                   \"field\": \"code\"\n                 },\n                 \"to\": {\n                   \"type\": \"NewBook\",\n                   \"field\": \"isAvailable\"\n                 },\n                 \"composer\": \"./customResolvers.js#isAvailable\",\n                 \"name\": \"isAvailable\"\n               }\n             ]\n           }\n         }\n       ]\n      }\n      ```\n      And now we have the following shiny GraphQL schema:\n      ```graphql\n      type Query {\n       books: [Book]\n      }\n      type Book {\n       title: String!\n       author: Author!\n       isAvailable: Boolean\n      }\n      type Author {\n       name: String!\n       age: Int!\n      }\n      ```\n      */\n    }\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`typeDefs`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)  -  Additional type definition to used to replace field types`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`replacements`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required)  -  Array of rules to replace fields`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`from`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`to`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`scope`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String (config | hoistValue)`}</inlineCode>{`)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}