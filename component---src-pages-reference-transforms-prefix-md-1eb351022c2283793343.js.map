{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/reference/transforms/prefix.md"],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"mappings":"2OAUsBA,E,wEAFTC,EAAe,GAOtBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,oBADR,qBAGA,0BAAW,uBAAYC,WAAW,KAAvB,UAAX,iFAA8I,uBAAYA,WAAW,KAAvB,kBAA9I,OACA,yGACA,eACE,GAAM,cADR,gBAGA,gFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,yIAaL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,8EAA+D,cAAGC,WAAW,IACzE,KAAQ,2EADmD,qBAA/D,MAGA,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,mIACF,cAAGC,WAAW,IACR,KAAQ,6EADd,8CAGE,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,MAA0I,uBAAYA,WAAW,MAAvB,QAA1I,OAAkM,uBAAYA,WAAW,MAAvB,QAAlM,yFACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,SAApB,YAAkF,uBAAYA,WAAW,MAAvB,UAAlF,+EACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,YAAmF,uBAAYA,WAAW,MAAvB,mBAAnF,wCACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,yBAApB,YAAkG,uBAAYA,WAAW,MAAvB,WAAlG,wEACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,gBAApB,YAAyF,uBAAYA,WAAW,MAAvB,WAAzF,uCAMNH,EAAWM,gBAAiB","file":"component---src-pages-reference-transforms-prefix-md-1eb351022c2283793343.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"prefix-transform\"\n    }}>{`prefix transform`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{` transform allow you prefix GraphQL types and GraphQL root operations (under `}<inlineCode parentName=\"p\">{`Query/Mutation`}</inlineCode>{`).`}</p>\n    <p>{`You can use it to easily \"namespace\" APIs in your unified API and avoid conflicts.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-use\"\n    }}>{`How to use?`}</h2>\n    <p>{`Add the following configuration to your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"prefix\": {\n        \"mode\": \"bare | wrap\",\n        \"value\": \"MyApi_\"\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about \"bare\" and \"wrap\" modes, read the `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes\"\n      }}>{`dedicated section`}</a>{`.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You can check out our example that uses schema stitching with a PostgreSQL datasource and prefix transform.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Urigo/graphql-mesh/tree/master/examples/postgres-geodb\"\n      }}>{`Click here to open the example on GitHub`}</a></p>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mode`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`bare`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`wrap`}</inlineCode>{`)) - Specify to apply prefix transform to bare schema or by wrapping original schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - The prefix to apply to the schema types. By default it's the API name.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ignore`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of String`}</inlineCode>{`, required) - List of ignored types`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`includeRootOperations`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`) - Changes root types and changes the field names (default: false)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`includeTypes`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`) - Changes types (default: true)`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}