{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/reference/transforms/federation.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,wBADR,yBAGA,mBAAG,uBAAYC,WAAW,KAAvB,cAAH,4NAAqR,cAAGA,WAAW,IAC/R,KAAQ,wDACP,uBAAYA,WAAW,KAAvB,iCAFL,cAGA,eACE,GAAM,cADR,gBAGA,gFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,irBAsCL,eACE,GAAM,yCADR,0CAGA,qIACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,iFAML,mBAAG,uBAAYA,WAAW,KAAvB,+BACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,wNAML,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,SAApB,YAAkF,uBAAYA,WAAW,MAAvB,mBAAlF,gBACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,gBACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,YAAmF,uBAAYA,WAAW,MAAvB,UAAnF,MACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,aAApB,YAAsF,uBAAYA,WAAW,MAAvB,mBAAtF,gBACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,YAAmF,uBAAYA,WAAW,MAAvB,WAAnF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,YAAmF,uBAAYA,WAAW,MAAvB,mBAAnF,gBACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,gBACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,YAAmF,uBAAYA,WAAW,MAAvB,UAAnF,gBACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YAApB,YAAqF,uBAAYA,WAAW,MAAvB,WAArF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YAApB,YAAqF,uBAAYA,WAAW,MAAvB,UAArF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YAApB,YAAqF,uBAAYA,WAAW,MAAvB,UAArF,UAKR,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,oBAApB,eACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YACpB,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,KACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,kBAApB,YAA2F,uBAAYA,WAAW,MAAvB,UAA3F,sEACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,YAAmF,uBAAYA,WAAW,MAAvB,UAAnF,qHAetBJ,EAAWK,gBAAiB","file":"component---src-pages-reference-transforms-federation-md-f58df49943c417808907.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"federation-transform\"\n    }}>{`federation transform`}</h1>\n    <p><inlineCode parentName=\"p\">{`federation`}</inlineCode>{` transform allows to add the resolvers and directives to conform to the federation specification. Much of the federation source code could be reused ensuring it is compliant to the specification. This transform uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/0xR/graphql-transform-federation\"\n      }}><inlineCode parentName=\"a\">{`graphql-transform-federation`}</inlineCode></a>{` package.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-use\"\n    }}>{`How to use?`}</h2>\n    <p>{`Add the following configuration to your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"federation\": {\n        \"types\": [\n          {\n            \"name\": \"Query\",\n            \"config\": {\n              \"extend\": true\n            }\n          },\n          {\n            \"name\": \"Product\",\n            \"config\": {\n              \"extend\": true,\n              \"keyFields\": [\n                \"id\"\n              ],\n              \"fields\": [\n                {\n                  \"name\": \"id\",\n                  \"external\": true\n                }\n              ],\n              \"resolveReference\": {\n                \"queryFieldName\": \"user\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"add-reference-resolver-as-a-code-file\"\n    }}>{`Add Reference Resolver as a Code File`}</h3>\n    <p>{`If you want to add more complex business logic, you can point to a code file that exports a resolver function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"resolveReference\": \"https://my-site.com/userResolveReference.js\"\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`./userResolveReference.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// So we can point to an existing query field to resolve that entity\nmodule.exports = (root, context, info) =>\n                    context.accounts.Query.user({ root, args: { id: root.id }, context, info })\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`types`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required):`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`config`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keyFields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of String`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`extend`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required):`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n                  <li parentName=\"ul\"><inlineCode parentName=\"li\">{`config`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n                    <ul parentName=\"li\">\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`external`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}</li>\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`provides`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requires`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resolveReference`}</inlineCode>{` -  One of:`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\"><inlineCode parentName=\"li\">{`String`}</inlineCode></li>\n                  <li parentName=\"ul\"><inlineCode parentName=\"li\">{`object`}</inlineCode>{`:`}\n                    <ul parentName=\"li\">\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`queryFieldName`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required) - Name of root field name that resolves the reference`}</li>\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keyArg`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - If the root field name has multiple args,\nyou need to define which argument should receive the key`}</li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}