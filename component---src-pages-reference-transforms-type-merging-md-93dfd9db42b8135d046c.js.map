{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/reference/transforms/type-merging.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-reference-transforms-type-merging-md-93dfd9db42b8135d046c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"typemerge-transform\"\n    }}>{`typeMerge transform`}</h1>\n    <p>{`This transform helps you to use Type Merging approach of Schema Stitching in your GraphQL Mesh sources.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"AuthorService\",\n      \"handler\": {\n        \"graphql\": {\n          \"endpoint\": \"https://my-site.com/author-service-schema.js\"\n        }\n      },\n      \"transforms\": [\n        {\n          \"typeMerging\": {\n            \"queryFields\": [\n              {\n                \"queryFieldName\": \"authors\",\n                \"keyField\": \"id\"\n              }\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"BookService\",\n      \"handler\": {\n        \"graphql\": {\n          \"endpoint\": \"https://my-site.com/book-service-schema.js\"\n        }\n      },\n      \"transforms\": [\n        {\n          \"rename\": {\n            \"renames\": [\n              {\n                \"from\": {\n                  \"type\": \"AuthorWithBooks\"\n                },\n                \"to\": {\n                  \"type\": \"Author\"\n                }\n              },\n              {\n                \"from\": {\n                  \"type\": \"Query\",\n                  \"field\": \"authorWithBooks\"\n                },\n                \"to\": {\n                  \"type\": \"Query\",\n                  \"field\": \"author\"\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"typeMerging\": {\n            \"queryFields\": [\n              {\n                \"queryFieldName\": \"book\",\n                \"keyField\": \"id\"\n              },\n              {\n                \"queryFieldName\": \"author\",\n                \"keyField\": \"id\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`types`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required):`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`typeName`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - Name of the type (Query by default)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`) - Specifies a base selection set needed to merge the annotated type across subschemas.\nAnalogous to the `}<inlineCode parentName=\"li\">{`selectionSet`}</inlineCode>{` setting specified in `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.graphql-tools.com/docs/stitch-type-merging#basic-example\"\n            }}>{`merged type configuration`}</a>{`:`}\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`  -  \\`selectionSet\\` (type: \\`String\\`, required)\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`canonical`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`) - Specifies types and fields\nthat provide a `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.graphql-tools.com/docs/stitch-type-merging#canonical-definitions\"\n            }}>{`canonical definition`}</a>{` to be built into the gateway schema. Useful for selecting preferred characteristics among types and fields that overlap across subschemas. Root fields marked as canonical specify which subschema the field proxies for new queries entering the graph.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required):`}\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`  -  \\`fieldName\\` (type: \\`String\\`, required)\n  -  \\`computed\\` (type: \\`Object\\`) - specifies a selection of fields required from other services to compute the value of this field.\n`}</code></pre>\n            {`These additional fields are only selected when the computed field is requested.\nAnalogous to `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.graphql-tools.com/docs/stitch-type-merging#computed-fields\"\n            }}>{`computed field`}</a>{` in merged type configuration.\nComputed field dependencies must be sent into the subservice using an `}<a parentName=\"li\" {...{\n              \"href\": \"https://www.graphql-tools.com/docs/stitch-directives-sdl#object-keys\"\n            }}>{`object key`}</a>{`.:`}\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`     -  \\`selectionSet\\` (type: \\`String\\`, required)\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`queryFields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required) - Denotes a root field used to query a merged type across services.\nThe marked field's name is analogous\nto the fieldName setting in\n`}<a parentName=\"li\" {...{\n          \"href\": \"https://www.graphql-tools.com/docs/stitch-type-merging#basic-example\"\n        }}>{`merged type configuration`}</a>{`,\nwhile the field's arguments and return type are used to infer merge configuration.\nDirective arguments tune the merge behavior:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`queryFieldName`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keyField`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - Specifies the name of a field to pick off origin objects as the key value. When omitted, a `}<inlineCode parentName=\"li\">{`@key`}</inlineCode>{` directive must be included on the return type's definition to be built into an object key.\n`}<a parentName=\"li\" {...{\n              \"href\": \"https://www.graphql-tools.com/docs/stitch-directives-sdl#object-keys\"\n            }}>{`https://www.graphql-tools.com/docs/stitch-directives-sdl#object-keys`}</a></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keyArg`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - Specifies which field argument receives the merge key. This may be omitted for fields with only one argument where the recipient can be inferred.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`additionalArgs`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - Specifies a string of additional keys and values to apply to other arguments,\nformatted as `}<inlineCode parentName=\"li\">{`\\\\\"\\\\\"\\\\\" arg1: \"value\", arg2: \"value\" \\\\\"\\\\\"\\\\\"`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of String`}</inlineCode>{`, required) - Advanced use only; Allows building a custom key just for the argument from the selectionSet included by the `}<inlineCode parentName=\"li\">{`@key`}</inlineCode>{` directive.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`argsExpr`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - Advanced use only; This argument specifies a string expression that allows more customization of the input arguments. Rules for evaluation of this argument are as follows:`}</li>\n          <li parentName=\"ul\">{`Basic object parsing of the input key: `}<inlineCode parentName=\"li\">{`\"arg1: $key.arg1, arg2: $key.arg2\"`}</inlineCode></li>\n          <li parentName=\"ul\">{`Any expression enclosed by double brackets will be evaluated once for each of the requested keys, and then sent as a list: `}<inlineCode parentName=\"li\">{`\"input: \\\\{ keys: [[$key]] }\"`}</inlineCode></li>\n          <li parentName=\"ul\">{`Selections from the key can be referenced by using the $ sign and dot notation: `}<inlineCode parentName=\"li\">{`\"upcs: [[$key.upc]]\"`}</inlineCode>{`, so that `}<inlineCode parentName=\"li\">{`$key.upc`}</inlineCode>{` refers to the `}<inlineCode parentName=\"li\">{`upc`}</inlineCode>{` field of the key.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`additionalConfiguration`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`) - The path to a code file that has additional type merging configuration`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}