{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/reference/transforms/filter-schema.md"],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"mappings":"yOAUsBA,E,wEAFTC,EAAe,GAOtBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,0BADR,2BAGA,0BAAW,uBAAYC,WAAW,KAAvB,gBAAX,8DACA,eACE,GAAM,cADR,gBAGA,gFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,ikBA2BL,kEACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBADZ,gbA6BL,+DACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,oUAmBL,4DACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBADZ,mNAkBL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,8EAA+D,cAAGC,WAAW,IACzE,KAAQ,2EADmD,qBAA/D,MAGA,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,MAA0I,uBAAYA,WAAW,MAAvB,QAA1I,OAAkM,uBAAYA,WAAW,MAAvB,QAAlM,iGACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,WAApB,YAAoF,uBAAYA,WAAW,MAAvB,mBAApF,yCAMNH,EAAWM,gBAAiB","file":"component---src-pages-reference-transforms-filter-schema-md-b7395ee76ca7f43c0c68.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"filterschema-transform\"\n    }}>{`filterSchema transform`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`filterSchema`}</inlineCode>{` transform allows you to filter fields in specific types.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-use\"\n    }}>{`How to use?`}</h2>\n    <p>{`Add the following configuration to your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"filterSchema\": {\n        \"mode\": \"bare | wrap\",\n        \"filters\": [\n          \"Type.!User\",\n          \"Type.!{User, Post}\",\n          \"Query.!admins\",\n          \"Mutation.!{addUser, removeUser}\",\n          \"User.{id, username, name, age}\",\n          \"Query.user.id\",\n          \"Query.user.!name\",\n          \"Query.user.{id, name}\",\n          \"Query.user.!{id, name}\",\n          \"Query.*.id\",\n          \"Query.*.!name\",\n          \"Query.*.{id, name}\",\n          \"Query.*.!{id, name}\"\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`Let's assume you have the following schema,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  me: User\n  users: [User]\n  user(id: ID, name: String): User\n  admins: [User]\n}\n\ntype Mutation {\n  updateMyProfile(name: String, age: Int): User\n  addUser(username: String, name: String, age: Int): User\n  removeUser(id: ID): ID\n}\n\ntype User {\n  id: ID\n  username: String\n  password: String\n  name: String\n  age: Int\n  ipAddress: String\n}\n\ntype LooseType {\n  foo: String\n  bar: String\n}\n`}</code></pre>\n    <p>{`With the following Filter Schema config,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"filterSchema\": {\n        \"mode\": \"bare | wrap\",\n        \"filters\": [\n          \"Type.!LooseType\",\n          \"Query.!admins\",\n          \"Mutation.!{addUser, removeUser}\",\n          \"User.{username, name, age}\",\n          \"Query.user.!name\"\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`It would become the following schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  me: User\n  users: [User]\n  user(id: ID): User\n}\n\ntype Mutation {\n  updateMyProfile(name: String, age: Int): User\n}\n\ntype User {\n  username: String\n  name: String\n  age: Int\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about \"bare\" and \"wrap\" modes, read the `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes\"\n      }}>{`dedicated section`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mode`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`bare`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`wrap`}</inlineCode>{`)) - Specify to apply filter-schema transforms to bare schema or by wrapping original schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`filters`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of String`}</inlineCode>{`, required) - Array of filter rules`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}