(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[147],{62531:function(e,n,t){"use strict";t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return h}});var a,o=t(22122),i=t(19756),l=(t(15007),t(64983)),r=t(99536),d=["components"],s={},p=(a="InlineAlert",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),m={_frontmatter:s},u=r.Z;function h(e){var n=e.components,t=(0,i.Z)(e,d);return(0,l.mdx)(u,(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"replacefield-transform"},"replaceField transform"),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"replaceField")," transform allows you to replace configuration properties of a GraphQL field (source) with the ones of another field (target)."),(0,l.mdx)("p",null,"This is extremely useful when you want to hoist field values from one subfield to its parent, but it can be customized to completely replace and/or compose resolve functions with a great degree of customization."),(0,l.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,l.mdx)("p",null,'For information about "bare" and "wrap" modes, read the ',(0,l.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes"},"dedicated section"),"."),(0,l.mdx)("h2",{id:"how-to-use"},"How to use?"),(0,l.mdx)("p",null,"Imagine you have generated your schema from a data source you don't control, and the generated schema looks like this:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  books: BooksApiResponse\n}\n\ntype BooksApiResponse {\n  books: [Book]\n}\n\ntype Book {\n  title: String!\n  author: Author!\n  code: String\n}\n\ntype Author {\n  name: String!\n  age: Int!\n}\n")),(0,l.mdx)("p",null,"As you can see you would have to request a GraphQL Document like the following, to retrieve the list of books:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  books {\n    books {\n      title\n      author\n    }\n  }\n}\n")),(0,l.mdx)("p",null,"This is not ideal because you have to request ",(0,l.mdx)("inlineCode",{parentName:"p"},"books")," as a child of ",(0,l.mdx)("inlineCode",{parentName:"p"},"books"),", so in this case hoisting the value from child to parent would lead to a cleaner schema and request Document."),(0,l.mdx)("p",null,"To achieve this you can add the following configuration to your Mesh config file:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "transforms": [\n    {\n      "replaceField": {\n        "replacements": [\n          {\n            "from": {\n              "type": "Query",\n              "field": "books"\n            },\n            "to": {\n              "type": "BooksApiResponse",\n              "field": "books"\n            },\n            "scope": "hoistValue"\n          }\n        ]\n      }\n    }\n  ]\n}\n')),(0,l.mdx)("p",null,"This will transform your schema from what you had above, to this:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  books: [Book]\n}\n\ntype Book {\n  title: String!\n  author: Author!\n  code: String\n}\n\ntype Author {\n  name: String!\n  age: Int!\n}\n")),(0,l.mdx)("p",null,"Allowing you to request a GraphQL document like this:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  books {\n    title\n    author\n  }\n}\n")),(0,l.mdx)("h2",{id:"how-the-transform-works"},"How the transform works"),(0,l.mdx)("p",null,"Let's understand more about how this transform works. With ",(0,l.mdx)("inlineCode",{parentName:"p"},"from")," you define your source, which field in the schema you want to replace."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "from": {\n      "type": "Query",\n      "field": "books"\n    }\n  }\n]\n')),(0,l.mdx)("p",null,"In this case, we want to replace the field ",(0,l.mdx)("inlineCode",{parentName:"p"},"books")," in type ",(0,l.mdx)("inlineCode",{parentName:"p"},"Query"),", which by default has the type ",(0,l.mdx)("inlineCode",{parentName:"p"},"BooksApiResponse"),"."),(0,l.mdx)("p",null,"With ",(0,l.mdx)("inlineCode",{parentName:"p"},"to")," you define your target, and so which field should replace your identified source field."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "to": {\n    "type": "BooksApiResponse",\n    "field": "books"\n  }\n}\n')),(0,l.mdx)("p",null,"To summarize, with the configuration above we want field ",(0,l.mdx)("inlineCode",{parentName:"p"},"books")," in type ",(0,l.mdx)("inlineCode",{parentName:"p"},"Query")," to be replaced from being of type ",(0,l.mdx)("inlineCode",{parentName:"p"},"BooksApiResponse")," to become type ",(0,l.mdx)("inlineCode",{parentName:"p"},"[Book]"),"."),(0,l.mdx)("p",null,"Finally, since we no longer have any reference to ",(0,l.mdx)("inlineCode",{parentName:"p"},"BooksApiResponse")," this becomes a loose type, and so the transform will purge it from the GraphQL schema."),(0,l.mdx)("h2",{id:"transform-scopes"},"Transform scopes"),(0,l.mdx)("p",null,"In the paragraph above we've explored how to use the transform to replace field Types.\nThe transform always replaces the type of the source field with the one of the target."),(0,l.mdx)("p",null,"However, the transform also allows you to pass a scope property, which values can be ",(0,l.mdx)("inlineCode",{parentName:"p"},"config")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"hoistValue"),"."),(0,l.mdx)("p",null,"We could say that the scope property could also take a ",(0,l.mdx)("inlineCode",{parentName:"p"},"type")," value, but since it's the minimum requirement to replace the Type, this is considered the default scope and so it wouldn't make sense to pass it when you desire just this behavior."),(0,l.mdx)("h3",{id:"scope-config"},"scope: config"),(0,l.mdx)("p",null,"When you pass ",(0,l.mdx)("inlineCode",{parentName:"p"},"scope: config")," the transform will replace the full field config.\nA field config includes properties of the field such as description, type, args, resolve, subscribe, deprecationReason, extensions, astNode."),(0,l.mdx)("p",null,"As you can see this is very comprehensive as it includes things like arguments as well as the resolve and subscribe functions."),(0,l.mdx)("p",null,"This can be useful when you have custom resolve functions on your target field and so you are happy to replace the source field entirely.\nHowever, you should be careful in doing this when you fully understand the implications of the behavior for your replaced field."),(0,l.mdx)("h3",{id:"scope-hoistvalue"},"scope: hoistValue"),(0,l.mdx)("p",null,"We have seen how ",(0,l.mdx)("inlineCode",{parentName:"p"},"hoistValue"),' can be useful in the full example described in the "How to use?" paragraph.'),(0,l.mdx)("p",null,"Once again, by default, the transform will replace the Type of the field only.\nWhen passing ",(0,l.mdx)("inlineCode",{parentName:"p"},"scope: hoistValue")," in addition to replacing the Type, the transform will wrap the resolve function of the original field (source) with an extra function. This function intercepts the return value of the resolver to ultimately return only the direct child property that has the same name as the target field; hence performing value hoisting."),(0,l.mdx)("p",null,"Taking into account the original schema shared above, originally ",(0,l.mdx)("inlineCode",{parentName:"p"},"Query.books")," would return a value like this:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  books: {\n    books: [{ title: 'abc', author: 'def' }, { title: 'ghi', author: 'lmn' }]\n  }\n}\n")),(0,l.mdx)("p",null,"But the wrapping function applied to the original resolver, when passing ",(0,l.mdx)("inlineCode",{parentName:"p"},"hoistValue")," scope, will change the value above to this:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  books: [{ title: 'abc', author: 'def' }, { title: 'ghi', author: 'lmn' }]\n}\n")),(0,l.mdx)("h2",{id:"additional-type-definitions"},"Additional type definitions"),(0,l.mdx)("p",null,"The examples shared so far are simple because we wanted to replace fields with other fields that are available in the original schema."),(0,l.mdx)("p",null,"However, sometimes you might want to replace a field Type with something that is not available in the original schema.\nIn this case, the transform allows you to pass additional type definitions that will be injected into your schema so that you can then use them as target field Types."),(0,l.mdx)("p",null,"Let's have a look at a Mesh config to be applied to the GraphQL schema shared above:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "transforms": [\n    {\n      "replaceField": {\n        "typeDefs": "type NewAuthor {\\n  age: String\\n}\\n",\n        "replacements": [\n          {\n            "from": {\n              "type": "Author",\n              "field": "age"\n            },\n            "to": {\n              "type": "NewAuthor",\n              "field": "age"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n')),(0,l.mdx)("p",null,"The config above will change type ",(0,l.mdx)("inlineCode",{parentName:"p"},"Author")," from this:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Author {\n  name: String!\n  age: Int!\n}\n")),(0,l.mdx)("p",null,"To this:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Author {\n  name: String!\n  age: String\n}\n")),(0,l.mdx)("h2",{id:"config-api-reference"},"Config API Reference"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"typeDefs")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"Any"),")  -  Additional type definition to used to replace field types"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"replacements")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"Array of Object"),", required)  -  Array of rules to replace fields",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"from")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"Object"),", required):",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"type")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"String"),", required)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"field")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"String"),", required)"))),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"to")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"Object"),", required):",(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"type")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"String"),", required)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"field")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"String"),", required)"))),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"scope")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"String (config | hoistValue)"),")"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"name")," (type: ",(0,l.mdx)("inlineCode",{parentName:"li"},"String"),")")))))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-reference-transforms-replace-field-md-720c88da484e2b29f55b.js.map