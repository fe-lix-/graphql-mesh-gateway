(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[113],{33649:function(e,a,n){"use strict";n.r(a),n.d(a,{_frontmatter:function(){return d},default:function(){return u}});var t,r=n(22122),o=n(19756),m=(n(15007),n(64983)),s=n(99536),i=["components"],d={},l=(t="InlineAlert",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,m.mdx)("div",e)}),p={_frontmatter:d},h=s.Z;function u(e){var a=e.components,n=(0,o.Z)(e,i);return(0,m.mdx)(h,(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,m.mdx)("h1",{id:"transforms"},"Transforms"),(0,m.mdx)("p",null,"The transform documentation was originally published by ",(0,m.mdx)("a",{parentName:"p",href:"https://www.the-guild.dev/"},"The Guild")," in their ",(0,m.mdx)("a",{parentName:"p",href:"https://www.graphql-mesh.com/docs/"},"GraphQL Mesh Docs"),". We are republishing it here under the ",(0,m.mdx)("a",{parentName:"p",href:"https://github.com/Urigo/graphql-mesh/blob/master/LICENSE#L3"},"MIT License")," because API Mesh for Adobe Developer App Builder uses an older version of GraphQL Mesh, while the documentation at that site reflects the current version. Additionally, we currently only support a limited set of handlers, transforms, and recipes."),(0,m.mdx)("p",null,"The following table specifies the transforms supported by the API Mesh and the version of each transform:"),(0,m.mdx)("table",null,(0,m.mdx)("thead",{parentName:"table"},(0,m.mdx)("tr",{parentName:"thead"},(0,m.mdx)("th",{parentName:"tr",align:null},"Transform"),(0,m.mdx)("th",{parentName:"tr",align:null},"Version"))),(0,m.mdx)("tbody",{parentName:"table"},(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("a",{parentName:"td",href:"encapsulate.md"},"encapsulate")),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("inlineCode",{parentName:"td"},"0.3.35"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("a",{parentName:"td",href:"federation.md"},"federation")),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("inlineCode",{parentName:"td"},"0.8.35"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("a",{parentName:"td",href:"filter-schema.md"},"filterSchema")),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("inlineCode",{parentName:"td"},"0.14.35"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("a",{parentName:"td",href:"naming-convention.md"},"namingConvention")),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("inlineCode",{parentName:"td"},"0.10.25"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("a",{parentName:"td",href:"prefix.md"},"prefix")),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("inlineCode",{parentName:"td"},"0.11.24"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("a",{parentName:"td",href:"rename.md"},"rename")),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("inlineCode",{parentName:"td"},"0.12.37"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("a",{parentName:"td",href:"replace-field.md"},"replaceField")),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("inlineCode",{parentName:"td"},"0.3.34"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("a",{parentName:"td",href:"type-merging.md"},"typeMerging")),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)("inlineCode",{parentName:"td"},"0.3.23"))))),(0,m.mdx)("p",null,"See ",(0,m.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/gateway/transforms/"},"Transforms")," if you would like more information on transforms in the context of the API Mesh."),(0,m.mdx)("h2",{id:"introduction-to-transforms"},"Introduction to transforms"),(0,m.mdx)("p",null,"GraphQL Mesh allows you to do schema transformations easily, you can use one of the built-in transforms, or write your own."),(0,m.mdx)("p",null,"Each transformer can manipulate the schema the way it needs, and return the modified schema."),(0,m.mdx)("p",null,"Transforms are specified as a list of objects, and they are executed in order, and you can apply them over a specific input source, or over the unified schema (after merging all sources)."),(0,m.mdx)("h2",{id:"handler-level-transforms"},"Handler-level transforms"),(0,m.mdx)("p",null,"To specify ",(0,m.mdx)("inlineCode",{parentName:"p"},"transforms")," over a specific source, add it to your ",(0,m.mdx)("inlineCode",{parentName:"p"},"sources")," section under the source you wish to modify."),(0,m.mdx)("p",null,"The following example prefixes an input source to make it simpler later to merge and avoid conflicts:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "Wiki",\n      "handler": {\n        "openapi": {\n          "source": "https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml"\n        }\n      },\n      "transforms": [\n        {\n          "prefix": {\n            "value": "Wiki_"\n          }\n        }\n      ]\n    }\n  ]\n}\n')),(0,m.mdx)("h2",{id:"two-different-modes"},"Two different modes"),(0,m.mdx)("p",null,'By default, most of the transforms manipulating schemas, works by wrapping the original schema; but recently we have also introduced a new "bare" mode to replace the original schema with the transformed one.\nAlthough apparently both ',(0,m.mdx)("inlineCode",{parentName:"p"},"bare")," and ",(0,m.mdx)("inlineCode",{parentName:"p"},"wrap")," modes do achieve the same result, their behaviors are very different.\nLet's take a look at how they operate."),(0,m.mdx)("h3",{id:"wrap"},"Wrap"),(0,m.mdx)(l,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,m.mdx)("p",null,'"Wrap" mode adds significant overhead and can cause longer processing times. When using the API Mesh, we strongly recommend using ',(0,m.mdx)("a",{parentName:"p",href:"index.md#bare"},"Bare")," mode."),(0,m.mdx)("p",null,'Wrap applies transformations by adding a wrapping layer to the original GraphQL schema. The handler generates a GraphQL\nschema and passes it to the transform. When in "wrap" mode, the transform, receives this schema and rather than updating this, it will apply a layer on top of it; with the scope of serving your transformations as an addition to the original schema generated by the handler.\nThis approach is safe as we have used it extensively in ',(0,m.mdx)("inlineCode",{parentName:"p"},"graphql-tools"),"; however, be mindful of the implications below."),(0,m.mdx)("h4",{id:"implications"},"Implications"),(0,m.mdx)("p",null,"Wrap is the default mode for schema manipulation transforms, because is safe and works across all data sources. However, you might want to be aware of the following implications."),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},'Runtime implications\nSchema wrapping is performed during initialization only and so won\'t affect runtime GraphQL operations. However, transforms altering the original schema shape using "wrap" mode, achieve this by intercepting both the incoming request and original response in order to do the mapping required to transform the original schema into the desired shape.\nNot all transforms require interception of both request and response and some require very simple mapping, so the runtime overhead could hopefully be negligible; however there will always be some.'),(0,m.mdx)("li",{parentName:"ul"},'Multiple wrapping layers\nWhen using "wrap" mode, the required transformation can be achieved by adding at least one wrapping layer per each transform rule defined. We cannot have a wrapping layer per transform, but we need one per rule since each rule is unique in the way it transforms different parts of the schema. Some rules might even require multiple wrapping layers, f.i. when transforming a field the transform need to be applied to RootFields, ObjectFields and InputObjectFields.\nAs explained on the previous point, the wrapping layers are registered during initialization only, however, each wrapping layer will always have some runtime implications, even if hopefully negligible.'),(0,m.mdx)("li",{parentName:"ul"},'Working with fixed-schema sources\nAs mentioned, "wrap" is the only mode that works for sources that "speaks" GraphQL natively. However, when you work with fixed schema sources, such as JSON-schema, OpenApi, SOAP, etc.; schema wrapping might have some undesired effects; f.i. you won\'t have access to the original "fixed-contract" response from your data source.\nThis might be not ideal, for example, when implementing custom resolvers, where you mght want to access several properties returned by your REST service in order to compute custom data; but instead you will only be able to access properties requested with the GraphQL query.\nIf you don\'t want/can\'t opt into "bare" mode, this can be easily solved by explicitly declaring a ',(0,m.mdx)("inlineCode",{parentName:"li"},"SelectionSet"),", within your custom resolver, to list all properties required in order to compute your custom data.")),(0,m.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,m.mdx)("p",null,'"wrap" is the only approach that works with data sources that already "speaks" GraphQL, or when you want to transform at all-sources (root) level, unless you\'re using merger-bare. If you want to remove the possible runtime implications, consider either moving your transforms at the data source level, or opting into ',(0,m.mdx)("inlineCode",{parentName:"p"},"merger-bare"),'; in order to take advantage of "bare" mode.'),(0,m.mdx)("p",null,"Example:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "Countries",\n      "handler": {\n        "graphql": {\n          "endpoint": "https://api.../graphql"\n        }\n      },\n      "transforms": [\n        {\n          "rename": {\n            "mode": "wrap",\n            "renames": [\n              {\n                "from": {\n                  "type": "Country",\n                  "field": "admin1Admins"\n                },\n                "to": {\n                  "type": "Country",\n                  "field": "admin1"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    },\n    {\n      "name": "Users",\n      "handler": {\n        "openapi": {\n          "source": "https://api.../swagger.yaml"\n        }\n      },\n      "transforms": [\n        {\n          "rename": {\n            "mode": "wrap",\n            "renames": [\n              {\n                "from": {\n                  "type": "User",\n                  "field": "lastName"\n                },\n                "to": {\n                  "type": "User",\n                  "field": "surname"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ],\n  "transforms": [\n    {\n      "rename": {\n        "mode": "wrap",\n        "renames": [\n          {\n            "from": {\n              "type": "Country",\n              "field": "ISO-3166_Code"\n            },\n            "to": {\n              "type": "Country",\n              "field": "code"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n')),(0,m.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,m.mdx)("p",null,'When you want to use "wrap", you can omit the "mode" property since this is already applied by default.'),(0,m.mdx)("h3",{id:"bare"},"Bare"),(0,m.mdx)("p",null,'Bare is a recent addition and works by replacing the original schema. The handler generates a GraphQL schema and passes it to the transform. When in "bare" mode, the transform, receives the schema generated by your handler, applies the transform rules defined and finally returns an updated version of the original schema.'),(0,m.mdx)("p",null,"This means that the transformed schema replaces the original schema from the handler and so Mesh deals with the latter schema only, as opposed to an original schema plus one or more wrapping layers."),(0,m.mdx)("p",null,"Bare mode does remove all the ",(0,m.mdx)("a",{parentName:"p",href:"#implications"},'implications of "wrap" mode'),", however, be mindful of the restrictions below."),(0,m.mdx)("h4",{id:"restrictions"},"Restrictions"),(0,m.mdx)("p",null,'Bare does provide performance improvements over "wrap", however it has a main restriction: it needs to access the bare schema. Here are some reasons why this might not work:'),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},'Your data source already "speaks" GraphQL\nIn this case "bare" won\'t work as it cannot replace a native GraphQL schema. This is not the same as transforming a "translated" GraphQL schema (e.g. from JSON-schema, OpenApi, SOAP, etc.).\nThe suggestion in this case is to apply "wrap" transforms to your GraphQL data sources and "bare" transforms to sources "translated" into GraphQL.')),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},'You are applying transforms at all-sources (root) level\nThis means that "bare" would receive a composed GraphQL schema, rather than a bare and "translated" schema. If you do want to use "bare" at the root level, your only choice is to opt into merger-bare, which lets transforms access the bare schemas; because it merges sources without wrapping them. This works when you don\'t have (or you take care of) conflicts between your sources, and you are not applying root-level transforms to data sources that already "speaks" GraphQL.')),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("p",{parentName:"li"},'You are mixing transforms that supports "bare" with transforms that don\'t\nAgain, "bare" always needs to access the bare schema. If you define other transforms that don\'t support "bare" mode, you will most likely have troubles, since those transforms will apply a wrapping layer which will provide "bare" transforms the wrapping layer, as opposed to the original bare schema.'),(0,m.mdx)("p",{parentName:"li"},'In order to take advantage of "bare" performance improvements, the suggestion here is to apply "wrap" transforms at the all-sources (root) level and "bare" transforms within the data sources level; so that at least you are able to reduce the number of wrapping layers that would otherwise be created if not using "bare" at all.'))),(0,m.mdx)("p",null,"Example:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "Countries",\n      "handler": {\n        "soap": {\n          "wsdl": "http://webservices.../wso?WSDL"\n        }\n      }\n    },\n    {\n      "name": "Users",\n      "handler": {\n        "openapi": {\n          "source": "https://api.../swagger.yaml"\n        }\n      },\n      "transforms": [\n        {\n          "rename": {\n            "mode": "bare",\n            "renames": [\n              {\n                "from": {\n                  "type": "User",\n                  "field": "lastName"\n                },\n                "to": {\n                  "type": "User",\n                  "field": "surname"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ],\n  "merger": "bare",\n  "transforms": [\n    {\n      "rename": {\n        "mode": "bare",\n        "renames": [\n          {\n            "from": {\n              "type": "Country",\n              "field": "ISO-3166_Code"\n            },\n            "to": {\n              "type": "Country",\n              "field": "code"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n')),(0,m.mdx)("h3",{id:"modes-support"},"Modes support"),(0,m.mdx)("p",null,'The table below illustrates how "bare" and "wrap" modes are supported across all transforms.\nIf you have use cases for which you would require to introduce either "bare" or "wrap" mode to one of the transforms, feel free to ',(0,m.mdx)("a",{parentName:"p",href:"https://github.com/Urigo/graphql-mesh/issues/new/choose"},"open a feature request"),"."),(0,m.mdx)("table",null,(0,m.mdx)("thead",{parentName:"table"},(0,m.mdx)("tr",{parentName:"thead"},(0,m.mdx)("th",{parentName:"tr",align:null},"Transform"),(0,m.mdx)("th",{parentName:"tr",align:"center"},"Bare"),(0,m.mdx)("th",{parentName:"tr",align:"center"},"Wrap"),(0,m.mdx)("th",{parentName:"tr",align:"center"},"Docs"))),(0,m.mdx)("tbody",{parentName:"table"},(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},"Encapsulate"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"❌"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},(0,m.mdx)("a",{parentName:"td",href:"encapsulate.md"},"docs"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},"Federation"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"❌"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},(0,m.mdx)("a",{parentName:"td",href:"federation.md"},"docs"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},"Filter Schema"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},(0,m.mdx)("a",{parentName:"td",href:"filter-schema.md"},"docs"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},"Naming Convention"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"❌"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},(0,m.mdx)("a",{parentName:"td",href:"naming-convention.md"},"docs"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},"Prefix"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},(0,m.mdx)("a",{parentName:"td",href:"prefix.md"},"docs"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},"Rename"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},(0,m.mdx)("a",{parentName:"td",href:"rename.md"},"docs"))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},"Replace Field"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"✅"),(0,m.mdx)("td",{parentName:"tr",align:"center"},"❌"),(0,m.mdx)("td",{parentName:"tr",align:"center"},(0,m.mdx)("a",{parentName:"td",href:"replace-field.md"},"docs"))))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-reference-transforms-index-md-cfdeb988685d48eae87f.js.map