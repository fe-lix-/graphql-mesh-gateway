{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/gateway/transforms.md"],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"mappings":"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","file":"component---src-pages-gateway-transforms-md-23ad87bb527d3c8e3706.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"transforms\"\n    }}>{`Transforms`}</h1>\n    <p>{`While `}<a parentName=\"p\" {...{\n        \"href\": \"source-handlers.md\"\n      }}>{`handlers`}</a>{` let you bring outside sources into API Mesh for Adobe Developer App Builder, `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/index.md\"\n      }}>{`transforms`}</a>{` allow you to modify the schema in order to control the contents of your GraphQL requests and responses.`}</p>\n    <p>{`The API Mesh currently supports the following `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/index.md\"\n      }}>{`transforms`}</a>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#rename\"\n        }}>{`Rename`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#prefix\"\n        }}>{`Prefix`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#filter-schema\"\n        }}>{`Filter`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#replace\"\n        }}>{`Replace`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#type-merge\"\n        }}>{`Type Merge`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#naming-convention\"\n        }}>{`Naming Convention`}</a></li>\n    </ul>\n    <p>{`Additionally, these transforms are available but are not fully supported at this time:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/graphql-mesh-gateway/reference/transforms/encapsulate.md\"\n        }}>{`Encapsulate`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/graphql-mesh-gateway/reference/transforms/federation.md\"\n        }}>{`Federation`}</a></li>\n    </ul>\n    <p>{`Other `}<a parentName=\"p\" {...{\n        \"href\": \"getting-started.md\"\n      }}>{`GraphQL Mesh`}</a>{` transforms are not supported.`}</p>\n    <h2 {...{\n      \"id\": \"prefix\"\n    }}>{`Prefix`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/prefix.md\"\n      }}>{`Prefix`}</a>{` transforms allow you to add prefixes to existing types and root operations. `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{` is similar to `}<inlineCode parentName=\"p\">{`rename`}</inlineCode>{` in that it allows you to modify names to avoid conflicts, simplify complicated names, and change the appearance of your query. In contrast with `}<inlineCode parentName=\"p\">{`rename`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{` is simpler and only allows you to append a prefix to the existing name. In the example below, we differentiate our sources by adding an \"AEM`}<em parentName=\"p\">{`\" prefix to the `}<a parentName=\"em\" {...{\n          \"href\": \"https://experienceleague.adobe.com/docs/experience-manager-cloud-service.html\"\n        }}>{`AEM`}</a>{` source and a  \"Venia`}</em>{`\" prefix to the the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/pwa-studio/\"\n      }}>{`PWA`}</a>{` source.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"AEM\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://example1.com/graphql\"\n          }\n        },\n        \"transforms\": [\n          {\n            \"prefix\": {\n              \"includeRootOperations\": true,\n              \"value\": \"AEM_\"\n            }\n          }\n        ]\n      },\n       {\n        \"name\": \"PWA\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"http://example2.com/graphql\"\n          }\n        },\n        \"transforms\": [\n          {\n            \"prefix\": {\n              \"includeRootOperations\": true,\n              \"value\": \"Venia_\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rename\"\n    }}>{`Rename`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/rename.md\"\n      }}>{`Rename`}</a>{` transforms allow you to rename a GraphQL field, type, or field argument. Renaming allows you to avoid conflicting names, simplify complicated names, and make queries look more like mutations. In the example below, we rename a long API field name from `}<inlineCode parentName=\"p\">{`integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost`}</inlineCode>{` to the shorter `}<inlineCode parentName=\"p\">{`CreateCustomerToken`}</inlineCode>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`rename`}</inlineCode>{` elements can contain arrays of individual renaming operations, defined in separate `}<inlineCode parentName=\"p\">{`renames`}</inlineCode>{` objects. Each of these objects must define the `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{` values.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You can use `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/rename.md#config-api-reference\"\n      }}>{`RegEx flags`}</a>{` to enable the use of regular expressions when renaming using this transform. For example, you could use the key value pair `}<inlineCode parentName=\"p\">{`field: api(.*)`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{` object to rename any field of the corresponding type that begins with \"api\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Magento REST\",\n        \"handler\": {\n          \"openapi\": {\n            \"source\": \"https://www.example.com/rest/all/schema?services=all\"\n          }\n        },\n          \"transforms\": [\n            {\n              \"rename\": {\n              \"renames\": [\n                {\n                  \"from\": {\n                    \"type\": \"Mutation\",\n                    \"field\": \"integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost\"\n                  },\n                  \"to\": {\n                    \"type\": \"Mutation\",\n                    \"field\": \"CreateCustomerToken\"\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"filter-schema\"\n    }}>{`Filter schema`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/filter-schema.md\"\n      }}>{`Filter Schema`}</a>{` transform allows you to specify which schema elements to include or exclude in your mesh. You can include or exclude entire queries and mutations, or place restrictions on which types can appear in your calls.`}</p>\n    <p>{`For example, you might want to exclude deprecated queries, mutations, and types from your schema so that your integration is not affected when these entities are removed. In the example below, the deprecated Adobe Commerce  `}<inlineCode parentName=\"p\">{`category`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`customerOrders`}</inlineCode>{` queries are filtered out of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/pwa-studio/\"\n      }}>{`PWA`}</a>{` handler.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"AEM\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://example1.com/graphql\"\n          }\n        }\n      },\n      {\n        \"name\": \"PWA\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://example2.com/graphql\"\n          }\n        },\n        \"transforms\": [\n          {\n            \"filterSchema\": {\n              \"filters\": [\n                \"Query.!category\",\n                \"Query.!customerOrders\"\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"replace\"\n    }}>{`Replace`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/replace-field.md\"\n      }}>{`Replace`}</a>{` transforms allow you to replace the configuration properties of one field with another, which allows you to hoist field values from a subfield to its parent. Use this transform to clean up redundant looking queries or replace field types. In the example below, the `}<inlineCode parentName=\"p\">{`parent`}</inlineCode>{` field is being replaced by the `}<inlineCode parentName=\"p\">{`child`}</inlineCode>{` field.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"PWA\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://example2.com/graphql\"\n          }\n        },\n          \"transforms\": [\n            {\n              \"replaceField\": {\n              \"replacements\": [\n                {\n                  \"from\": {\n                    \"type\": \"Query\",\n                    \"field\": \"parent\"\n                  },\n                  \"to\": {\n                    \"type\": \"<your_API_Response>\",\n                    \"field\": \"child\",\n                  \"scope\": \"hoistvalue\"\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-merge\"\n    }}>{`Type Merge`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/type-merging.md\"\n      }}>{`Type Merge`}</a>{` transforms allow you to combine multiple sources by merging a type from each source. For example, you could combine responses from two different APIs on a single field, provided you `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/rename.md\"\n      }}>{`rename`}</a>{` the fields you want to stitch to the same name. For more information, see this `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/multiple-apis.md#merging-types-from-different-sources-using-type-merging\"\n      }}>{`GraphQL Mesh Example`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"naming-convention\"\n    }}>{`Naming Convention`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/naming-convention.md\"\n      }}>{`Naming Convention`}</a>{` transforms allow you to apply casing and other conventions to your response. In the example below, `}<inlineCode parentName=\"p\">{`enumValues`}</inlineCode>{` fields are converted to uppercase, while `}<inlineCode parentName=\"p\">{`fieldNames`}</inlineCode>{` are converted to camel case to enforce consistency.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"PWA\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://example2.com/graphql\"\n          }\n        },\n        \"transforms\": [\n          {\n            \"namingConvention\": {\n              \"enumValues\": \"upperCase\",\n              \"fieldNames\": \"camelCase\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n`}</code></pre>\n    {\n      /* Link Definitions */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}