{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/reference/handlers/json-schema.md"],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","isMDXComponent"],"mappings":"2OAWsBA,E,mFAFTC,EAAe,GAOtBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAI5E,eACE,GAAM,wBADR,yBAGA,oMACA,SAACT,EAAD,CAAaU,QAAQ,UAAUC,MAAM,OAAOF,QAAQ,iBACpD,0BAAW,uBAAYG,WAAW,KAAvB,cAAX,8FAA+J,uBAAYA,WAAW,KAAvB,cAA/J,gCACA,gFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,sdAwBL,2EAA4D,cAAGA,WAAW,IACtE,KAAQ,0DADgD,iCAA5D,2BAGA,eACE,GAAM,kBADR,mBAGA,SAAC,UAAD,CAASH,QAAQ,aAsGjB,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIG,WAAW,OAAK,uBAAYA,WAAW,MAAvB,WAApB,YAAoF,uBAAYA,WAAW,MAAvB,UAApF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,oBAApB,YAA6F,uBAAYA,WAAW,MAAvB,QAA7F,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,iBAApB,YAA0F,uBAAYA,WAAW,MAAvB,QAA1F,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,cAApB,4BACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,KACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,SAApB,YAAkF,uBAAYA,WAAW,MAAvB,UAAlF,gBACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,eAApB,YAAwF,uBAAYA,WAAW,MAAvB,UAAxF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,4CAAjF,gBACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,iBAApB,YAA0F,uBAAYA,WAAW,MAAvB,OAA1F,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,iBAApB,YAA0F,uBAAYA,WAAW,MAAvB,OAA1F,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,mBAApB,YAA4F,uBAAYA,WAAW,MAAvB,UAA5F,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,kBAApB,YAA2F,uBAAYA,WAAW,MAAvB,OAA3F,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,kBAApB,YAA2F,uBAAYA,WAAW,MAAvB,OAA3F,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,oBAApB,YAA6F,uBAAYA,WAAW,MAAvB,UAA7F,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,cAApB,YAAuF,uBAAYA,WAAW,MAAvB,QAAvF,UAKR,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,wBAApB,YAAiG,uBAAYA,WAAW,MAAvB,WAAjG,OA8BNL,EAAWM,gBAAiB","file":"component---src-pages-reference-handlers-json-schema-md-ae17c758080657bd956f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Headers from '/src/pages/_includes/headers.md';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"json-schema-handlers\"\n    }}>{`JSON schema handlers`}</h1>\n    <p>{`This handler allows you to load any remote REST service, and describe its request/response. With this handler, you can easily customize and control the built GraphQL schema.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`JsonSchema`}</inlineCode>{` source in GraphQL Mesh uses a different capitalization scheme than other handlers. Using `}<inlineCode parentName=\"p\">{`jsonSchema`}</inlineCode>{` will result in an error.  `}</p>\n    <p>{`To get started, use the handler in your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"MyApi\",\n      \"handler\": {\n        \"JsonSchema\": {\n          \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n          \"operations\": [\n            {\n              \"type\": \"Query\",\n              \"field\": \"users\",\n              \"path\": \"/users\",\n              \"method\": \"GET\",\n              \"responseSchema\": \"https://my-json-schema/users.json\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`JSON Schema handlers can also use local sources, see `}<a parentName=\"p\" {...{\n        \"href\": \"../handlers/index.md#reference-local-files-in-handlers\"\n      }}>{`Reference local file handlers`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"dynamic-values\"\n    }}>{`Dynamic Values`}</h2>\n    <Headers mdxType=\"Headers\" />\n    {\n      /* Mesh can take dynamic values from the GraphQL Context or the environmental variables. If you use `mesh dev` or `mesh start`, GraphQL Context will be the incoming HTTP request.\n      The expression inside dynamic values should be as in JS.\n      ### From Context (HTTP Header for `mesh dev` or `mesh start`)\n      ```json\n      {\n       \"sources\": [\n         {\n           \"name\": \"MyGraphQLApi\",\n           \"handler\": {\n             \"JsonSchema\": {\n               \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n               \"operationHeaders\": {\n                 \"Authorization\": \"Bearer {context.headers['x-my-api-token']}\"\n               }\n             }\n           }\n         }\n       ]\n      }\n      ```\n      And for `mesh dev` or `mesh start`, you can pass the value using `x-my-graphql-api-token` HTTP header.\n      ### From Environment Variable\n      ```json\n      {\n       \"sources\": [\n         {\n           \"name\": \"MyGraphQLApi\",\n           \"handler\": {\n             \"JsonSchema\": {\n               \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n               \"operationHeaders\": {\n                 \"Authorization\": \"Bearer {env.MY_API_TOKEN}\"\n               }\n             }\n           }\n         }\n       ]\n      }\n      ```\n      ### From Arguments\n      Mesh automatically generates arguments for operations if needed;\n      ```json\n      {\n       \"sources\": [\n         {\n           \"name\": \"MyGraphQLApi\",\n           \"handler\": {\n             \"JsonSchema\": {\n               \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n               \"operations\": [\n                 {\n                   \"type\": \"Query\",\n                   \"field\": \"user\",\n                   \"path\": \"/user/{args.id}\",\n                   \"method\": \"GET\",\n                   \"responseSchema\": \"./json-schemas/user.json\"\n                 }\n               ]\n             }\n           }\n         }\n       ]\n      }\n      ```\n      This example operation definition will generate a root field with `id: ID` argument, then Mesh will interpolate the expression in `path` to get `id` value from `args`.\n      ### From JSON Samples\n      Mesh can also load JSON samples from a remote service.\n      Just add a `json-samples` directory in your project root, and put the JSON samples in there (`responseSample: ./json/MyField.response.json` - Create a new folder like `json`).\n      By declaring the `responseSample`, you can use the JSON sample in the GraphQL schema.\n       `Mesh Sample Example - .meshrc.json file`\n      ```json\n      {\n       \"sources\": [\n         {\n           \"name\": \"MyGraphQLApi\",\n           \"handler\": {\n             \"JsonSchema\": {\n               \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n               \"operations\": [\n                 {\n                   \"type\": \"Query\",\n                   \"field\": \"MyField\",\n                   \"path\": \"/MyField?id={args.id}\",\n                   \"method\": \"GET\",\n                   \"responseSample\": \"./json/MyField.response.json\",\n                   \"responseTypeName\": \"MyResponseName\",\n                   \"argsTypeMap\": {\n                     \"id\": \"String\"\n                   }\n                 }\n               ]\n             }\n           }\n         }\n       ]\n      }\n      ```\n       For your `./jsons/MyField.response.json` file, any JSON file can be used.\n      */\n    }\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`baseUrl`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`operationHeaders`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`JSON`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`schemaHeaders`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`JSON`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`operations`}</inlineCode>{` -  (required) Array of:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`object`}</inlineCode>{`:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`description`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String (Query | Mutation | Subscription)`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requestSchema`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requestSample`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requestTypeName`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`responseSchema`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`responseSample`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`responseTypeName`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`argTypeMap`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`JSON`}</inlineCode>{`)`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ignoreErrorResponses`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}\n        {\n          /*   \n          `path` (type: `String`, required)\n          `method` (type: `String (GET | HEAD | POST | PUT | DELETE | CONNECT | OPTIONS | TRACE | PATCH)`)\n          `headers` (type: `JSON`)\n          `binary` (type: `Boolean`) - If true, this operation cannot have requestSchema or requestSample\n          And the request body will be passed as binary with its mime type\n          unless you define an explicit Content-Type header\n          `object`:\n             `field` (type: `String`, required)\n             `description` (type: `String`)\n             `type` (type: `String (Query | Mutation | Subscription)`, required)\n             `requestSchema` (type: `Any`)\n             `requestSample` (type: `Any`)\n             `requestTypeName` (type: `String`)\n             `requestBaseBody` (type: `Any`) - This body will be merged with the request body sent with the underlying HTTP request\n             `responseSchema` (type: `Any`)\n             `responseSample` (type: `Any`)\n             `responseTypeName` (type: `String`)\n             `argTypeMap` (type: `JSON`)\n             `pubsubTopic` (type: `String`, required) \n          */\n        }\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}