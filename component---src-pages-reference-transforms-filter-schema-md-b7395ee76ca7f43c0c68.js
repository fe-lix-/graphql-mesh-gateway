(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[464],{466:function(e,n,r){"use strict";r.r(n),r.d(n,{_frontmatter:function(){return d},default:function(){return f}});var a,t=r(22122),i=r(19756),m=(r(15007),r(64983)),o=r(99536),s=["components"],d={},l=(a="InlineAlert",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,m.mdx)("div",e)}),p={_frontmatter:d},u=o.Z;function f(e){var n=e.components,r=(0,i.Z)(e,s);return(0,m.mdx)(u,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,m.mdx)("h1",{id:"filterschema-transform"},"filterSchema transform"),(0,m.mdx)("p",null,"The ",(0,m.mdx)("inlineCode",{parentName:"p"},"filterSchema")," transform allows you to filter fields in specific types."),(0,m.mdx)("h2",{id:"how-to-use"},"How to use?"),(0,m.mdx)("p",null,"Add the following configuration to your Mesh config file:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "transforms": [\n    {\n      "filterSchema": {\n        "mode": "bare | wrap",\n        "filters": [\n          "Type.!User",\n          "Type.!{User, Post}",\n          "Query.!admins",\n          "Mutation.!{addUser, removeUser}",\n          "User.{id, username, name, age}",\n          "Query.user.id",\n          "Query.user.!name",\n          "Query.user.{id, name}",\n          "Query.user.!{id, name}",\n          "Query.*.id",\n          "Query.*.!name",\n          "Query.*.{id, name}",\n          "Query.*.!{id, name}"\n        ]\n      }\n    }\n  ]\n}\n')),(0,m.mdx)("p",null,"Let's assume you have the following schema,"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  me: User\n  users: [User]\n  user(id: ID, name: String): User\n  admins: [User]\n}\n\ntype Mutation {\n  updateMyProfile(name: String, age: Int): User\n  addUser(username: String, name: String, age: Int): User\n  removeUser(id: ID): ID\n}\n\ntype User {\n  id: ID\n  username: String\n  password: String\n  name: String\n  age: Int\n  ipAddress: String\n}\n\ntype LooseType {\n  foo: String\n  bar: String\n}\n")),(0,m.mdx)("p",null,"With the following Filter Schema config,"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "transforms": [\n    {\n      "filterSchema": {\n        "mode": "bare | wrap",\n        "filters": [\n          "Type.!LooseType",\n          "Query.!admins",\n          "Mutation.!{addUser, removeUser}",\n          "User.{username, name, age}",\n          "Query.user.!name"\n        ]\n      }\n    }\n  ]\n}\n')),(0,m.mdx)("p",null,"It would become the following schema:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  me: User\n  users: [User]\n  user(id: ID): User\n}\n\ntype Mutation {\n  updateMyProfile(name: String, age: Int): User\n}\n\ntype User {\n  username: String\n  name: String\n  age: Int\n}\n")),(0,m.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,m.mdx)("p",null,'For information about "bare" and "wrap" modes, read the ',(0,m.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes"},"dedicated section"),"."),(0,m.mdx)("h2",{id:"config-api-reference"},"Config API Reference"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"mode")," (type: ",(0,m.mdx)("inlineCode",{parentName:"li"},"String")," (",(0,m.mdx)("inlineCode",{parentName:"li"},"bare")," | ",(0,m.mdx)("inlineCode",{parentName:"li"},"wrap"),")) - Specify to apply filter-schema transforms to bare schema or by wrapping original schema"),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"filters")," (type: ",(0,m.mdx)("inlineCode",{parentName:"li"},"Array of String"),", required) - Array of filter rules")))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-reference-transforms-filter-schema-md-b7395ee76ca7f43c0c68.js.map